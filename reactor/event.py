"""
Event module.

This module describes the types of events that can be generated by the daemon
and subsequently emitted to the clients.

"""

known_events = {}

class ReactorEventMetaClass(type):
    """
    This metaclass simply keeps a list of all events classes created.
    """
    def __init__(cls, name, bases, dct):
        super(ReactorEventMetaClass, cls).__init__(name, bases, dct)
        if name != "WhistlerEvent":
            known_events[name] = cls

class ReactorEvent(object):
    """
    The base class for all events.

    :prop name: this is the name of the class which is in-turn the event name
    :prop args: a list of the attribute values

    """
    __metaclass__ = ReactorEventMetaClass

    def _get_name(self):
        return self.__class__.__name__

    def _get_args(self):
        if not hasattr(self, "_args"):
            return []
        return self._args

    name = property(fget=_get_name)
    args = property(fget=_get_args)
    
class MessageInQueueEvent(ReactorEvent):
    """
    Fired when a new message is received
    """
    def __init__(self, source):
        """
        :param source: object, the source of event
        :param message: message, received message
        """
        self._args = [source]

class MessageReceivedEvent(ReactorEvent):
    """
    Fired when a new message is received
    """
    def __init__(self, source, message):
        """
        :param source: object, the source of event
        :param message: message, received message
        """
        self._args = [source, message]


